<?xml version="1.0" encoding="UTF-8" standalone="yes"?><!DOCTYPE report PUBLIC "-//JACOCO//DTD Report 1.1//EN" "report.dtd"><report name="problem2"><sessioninfo id="DESKTOP-12J1VDD-6e9a13ce" start="1569419939155" dump="1569419939458"/><sessioninfo id="DESKTOP-12J1VDD-5d95daa6" start="1569480122826" dump="1569480123105"/><sessioninfo id="DESKTOP-12J1VDD-a15e04e0" start="1569566573986" dump="1569566574280"/><sessioninfo id="DESKTOP-12J1VDD-2d1cac7f" start="1569574174919" dump="1569574175221"/><sessioninfo id="DESKTOP-12J1VDD-2cf835ff" start="1569574271832" dump="1569574272131"/><sessioninfo id="DESKTOP-12J1VDD-e61ab9c4" start="1569574366772" dump="1569574367169"/><sessioninfo id="DESKTOP-12J1VDD-f9452ec6" start="1569576096367" dump="1569576096804"/><sessioninfo id="DESKTOP-12J1VDD-9b942f9e" start="1569577730579" dump="1569577731005"/><sessioninfo id="DESKTOP-12J1VDD-58aecf94" start="1569578124614" dump="1569578125096"/><sessioninfo id="DESKTOP-12J1VDD-7684d24d" start="1569578500776" dump="1569578501277"/><sessioninfo id="DESKTOP-12J1VDD-bed0adb9" start="1569578805746" dump="1569578806206"/><sessioninfo id="DESKTOP-12J1VDD-5786bb25" start="1569579473498" dump="1569579474033"/><sessioninfo id="DESKTOP-12J1VDD-f3602cb" start="1569580350272" dump="1569580350869"/><sessioninfo id="DESKTOP-12J1VDD-6f6dd7ef" start="1569580576404" dump="1569580576911"/><sessioninfo id="DESKTOP-12J1VDD-55341129" start="1569581953223" dump="1569581953921"/><sessioninfo id="DESKTOP-12J1VDD-54e2db5" start="1569582054244" dump="1569582054834"/><sessioninfo id="DESKTOP-12J1VDD-61f39122" start="1569583954162" dump="1569583954858"/><sessioninfo id="DESKTOP-12J1VDD-d228f002" start="1569583986563" dump="1569583987144"/><sessioninfo id="DESKTOP-12J1VDD-1d2967cf" start="1569584063064" dump="1569584063639"/><sessioninfo id="DESKTOP-12J1VDD-e2c98fdb" start="1569584239631" dump="1569584240210"/><sessioninfo id="DESKTOP-12J1VDD-5a580d94" start="1569584280654" dump="1569584281295"/><sessioninfo id="DESKTOP-12J1VDD-575095a0" start="1569584312715" dump="1569584313330"/><sessioninfo id="DESKTOP-12J1VDD-acd52757" start="1569638682369" dump="1569638683066"/><sessioninfo id="DESKTOP-12J1VDD-2a42fb44" start="1569638713562" dump="1569638714166"/><sessioninfo id="DESKTOP-12J1VDD-ad198968" start="1569638748521" dump="1569638749199"/><sessioninfo id="DESKTOP-12J1VDD-f641e62d" start="1569638835612" dump="1569638836207"/><sessioninfo id="DESKTOP-12J1VDD-60b17003" start="1569642012755" dump="1569642013391"/><sessioninfo id="DESKTOP-12J1VDD-57bebd79" start="1569642042717" dump="1569642043356"/><sessioninfo id="DESKTOP-12J1VDD-d184f96a" start="1569642048144" dump="1569642048769"/><sessioninfo id="DESKTOP-12J1VDD-87066ca3" start="1569642112155" dump="1569642112852"/><sessioninfo id="DESKTOP-12J1VDD-d9879988" start="1569642135103" dump="1569642135805"/><sessioninfo id="DESKTOP-12J1VDD-a8e37187" start="1569646116391" dump="1569646116966"/><sessioninfo id="DESKTOP-12J1VDD-eef67231" start="1569646170018" dump="1569646170508"/><sessioninfo id="DESKTOP-12J1VDD-7743667d" start="1569646186761" dump="1569646187216"/><sessioninfo id="DESKTOP-12J1VDD-2955e483" start="1569646198441" dump="1569646198950"/><sessioninfo id="DESKTOP-12J1VDD-4e9f5d3f" start="1569676397029" dump="1569676397567"/><sessioninfo id="DESKTOP-12J1VDD-b81bf621" start="1569676431824" dump="1569676432342"/><sessioninfo id="DESKTOP-12J1VDD-df1249f1" start="1569676455429" dump="1569676455920"/><sessioninfo id="DESKTOP-12J1VDD-41e6b6e4" start="1569676502494" dump="1569676502953"/><sessioninfo id="DESKTOP-12J1VDD-9fb8a93b" start="1569676890226" dump="1569676890687"/><sessioninfo id="DESKTOP-12J1VDD-7d5f15d7" start="1569676918268" dump="1569676918733"/><sessioninfo id="DESKTOP-12J1VDD-cde09edf" start="1569679241762" dump="1569679242245"/><sessioninfo id="DESKTOP-12J1VDD-ddece44d" start="1569679326426" dump="1569679326907"/><sessioninfo id="DESKTOP-12J1VDD-896101ce" start="1569679364291" dump="1569679364769"/><sessioninfo id="DESKTOP-12J1VDD-3728d9ed" start="1569679470035" dump="1569679470499"/><sessioninfo id="DESKTOP-12J1VDD-54f520c9" start="1569679488292" dump="1569679488757"/><sessioninfo id="DESKTOP-12J1VDD-e5c823bb" start="1569679592027" dump="1569679592518"/><sessioninfo id="DESKTOP-12J1VDD-e516567f" start="1569679603398" dump="1569679603910"/><sessioninfo id="DESKTOP-12J1VDD-e54c92d6" start="1569679651863" dump="1569679652428"/><sessioninfo id="DESKTOP-12J1VDD-23945dca" start="1569679716402" dump="1569679717003"/><sessioninfo id="DESKTOP-12J1VDD-d2afc5c4" start="1569679862356" dump="1569679862842"/><sessioninfo id="DESKTOP-12J1VDD-766ecd98" start="1569679925448" dump="1569679925962"/><sessioninfo id="DESKTOP-12J1VDD-b7ddc336" start="1569680161536" dump="1569680162021"/><sessioninfo id="DESKTOP-12J1VDD-5ec4471b" start="1569680194556" dump="1569680195028"/><sessioninfo id="DESKTOP-12J1VDD-c5e410eb" start="1569680353967" dump="1569680354475"/><sessioninfo id="DESKTOP-12J1VDD-e7600862" start="1569680405394" dump="1569680405866"/><sessioninfo id="DESKTOP-12J1VDD-75065d35" start="1569680551809" dump="1569680552332"/><sessioninfo id="DESKTOP-12J1VDD-3136a3b" start="1569680625473" dump="1569680626023"/><sessioninfo id="DESKTOP-12J1VDD-b54ae3af" start="1569680681073" dump="1569680681619"/><sessioninfo id="DESKTOP-12J1VDD-8ab92374" start="1569680740208" dump="1569680740759"/><sessioninfo id="DESKTOP-12J1VDD-238f0ce1" start="1569680759858" dump="1569680760435"/><sessioninfo id="DESKTOP-12J1VDD-8de97e19" start="1569680821205" dump="1569680821718"/><sessioninfo id="DESKTOP-12J1VDD-950b1f0f" start="1569680844510" dump="1569680845046"/><sessioninfo id="DESKTOP-12J1VDD-ae4b4344" start="1569680876917" dump="1569680877408"/><sessioninfo id="DESKTOP-12J1VDD-1b3e1a77" start="1569680909108" dump="1569680909622"/><sessioninfo id="DESKTOP-12J1VDD-a857f659" start="1569680941157" dump="1569680941793"/><sessioninfo id="DESKTOP-12J1VDD-2178effe" start="1569680950782" dump="1569680951293"/><sessioninfo id="DESKTOP-12J1VDD-ed70b058" start="1569681063097" dump="1569681063629"/><sessioninfo id="DESKTOP-12J1VDD-5d5eeeed" start="1569681164789" dump="1569681165249"/><sessioninfo id="DESKTOP-12J1VDD-49ede5d1" start="1569681224176" dump="1569681224632"/><sessioninfo id="DESKTOP-12J1VDD-3db3ab9" start="1569681386425" dump="1569681386865"/><sessioninfo id="DESKTOP-12J1VDD-457c2447" start="1569681666659" dump="1569681667318"/><sessioninfo id="DESKTOP-12J1VDD-8a1ca361" start="1569681764616" dump="1569681765126"/><sessioninfo id="DESKTOP-12J1VDD-ed879b0b" start="1569681933707" dump="1569681934357"/><sessioninfo id="DESKTOP-12J1VDD-e03bcdc2" start="1569682185530" dump="1569682186137"/><sessioninfo id="DESKTOP-12J1VDD-f50198b4" start="1569682212860" dump="1569682213323"/><sessioninfo id="DESKTOP-12J1VDD-ed0ef8e0" start="1569682361496" dump="1569682361969"/><sessioninfo id="DESKTOP-12J1VDD-f08eb576" start="1569682414976" dump="1569682415424"/><sessioninfo id="DESKTOP-12J1VDD-4294051b" start="1569682473150" dump="1569682473652"/><package name="edu/postech/csed332/homework2"><class name="edu/postech/csed332/homework2/BooleanExpParser$VariableContext" sourcefilename="BooleanExpParser.java"><method name="ID" desc="()Lorg/antlr/v4/runtime/tree/TerminalNode;" line="150"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="&lt;init&gt;" desc="(Ledu/postech/csed332/homework2/BooleanExpParser$ExpressionContext;)V" line="151"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="accept" desc="(Lorg/antlr/v4/runtime/tree/ParseTreeVisitor;)Ljava/lang/Object;" line="154"><counter type="INSTRUCTION" missed="4" covered="8"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="1" covered="1"/><counter type="COMPLEXITY" missed="1" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="9" covered="14"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="2" covered="2"/><counter type="COMPLEXITY" missed="2" covered="2"/><counter type="METHOD" missed="1" covered="2"/><counter type="CLASS" missed="0" covered="1"/></class><class name="edu/postech/csed332/homework2/BooleanExpParser$ExpressionContext" sourcefilename="BooleanExpParser.java"><method name="&lt;init&gt;" desc="(Lorg/antlr/v4/runtime/ParserRuleContext;I)V" line="95"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getRuleIndex" desc="()I" line="97"><counter type="INSTRUCTION" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="&lt;init&gt;" desc="()V" line="99"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="copyFrom" desc="(Ledu/postech/csed332/homework2/BooleanExpParser$ExpressionContext;)V" line="101"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="2" covered="12"/><counter type="LINE" missed="1" covered="5"/><counter type="COMPLEXITY" missed="1" covered="3"/><counter type="METHOD" missed="1" covered="3"/><counter type="CLASS" missed="0" covered="1"/></class><class name="edu/postech/csed332/homework2/Constant" sourcefilename="Constant.java"><method name="&lt;init&gt;" desc="(Z)V" line="16"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getValue" desc="()Z" line="24"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="vars" desc="()Ljava/util/Set;" line="30"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="evaluate" desc="(Ljava/util/Map;)Ljava/lang/Boolean;" line="36"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="simplify" desc="()Ledu/postech/csed332/homework2/Exp;" line="42"><counter type="INSTRUCTION" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="toString" desc="()Ljava/lang/String;" line="47"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="5" covered="18"/><counter type="LINE" missed="2" covered="6"/><counter type="COMPLEXITY" missed="2" covered="4"/><counter type="METHOD" missed="2" covered="4"/><counter type="CLASS" missed="0" covered="1"/></class><class name="edu/postech/csed332/homework2/BooleanExpParser$BinaryExpContext" sourcefilename="BooleanExpParser.java"><method name="expression" desc="()Ljava/util/List;" line="120"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="expression" desc="(I)Ledu/postech/csed332/homework2/BooleanExpParser$ExpressionContext;" line="123"><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="AND" desc="()Lorg/antlr/v4/runtime/tree/TerminalNode;" line="125"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="OR" desc="()Lorg/antlr/v4/runtime/tree/TerminalNode;" line="126"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="&lt;init&gt;" desc="(Ledu/postech/csed332/homework2/BooleanExpParser$ExpressionContext;)V" line="127"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="accept" desc="(Lorg/antlr/v4/runtime/tree/ParseTreeVisitor;)Ljava/lang/Object;" line="130"><counter type="INSTRUCTION" missed="4" covered="8"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="1" covered="1"/><counter type="COMPLEXITY" missed="1" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="24" covered="14"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="5" covered="2"/><counter type="COMPLEXITY" missed="5" covered="2"/><counter type="METHOD" missed="4" covered="2"/><counter type="CLASS" missed="0" covered="1"/></class><class name="edu/postech/csed332/homework2/Negation" sourcefilename="Negation.java"><method name="&lt;init&gt;" desc="(Ledu/postech/csed332/homework2/Exp;)V" line="16"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getSubexp" desc="()Ledu/postech/csed332/homework2/Exp;" line="26"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="vars" desc="()Ljava/util/Set;" line="32"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="evaluate" desc="(Ljava/util/Map;)Ljava/lang/Boolean;" line="38"><counter type="INSTRUCTION" missed="0" covered="28"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="simplify" desc="()Ledu/postech/csed332/homework2/Exp;" line="50"><counter type="INSTRUCTION" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="toString" desc="()Ljava/lang/String;" line="55"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="5" covered="49"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="2" covered="11"/><counter type="COMPLEXITY" missed="2" covered="6"/><counter type="METHOD" missed="2" covered="4"/><counter type="CLASS" missed="0" covered="1"/></class><class name="edu/postech/csed332/homework2/Variable" sourcefilename="Variable.java"><method name="&lt;init&gt;" desc="(I)V" line="17"><counter type="INSTRUCTION" missed="5" covered="9"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="1" covered="4"/><counter type="COMPLEXITY" missed="1" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getIdentifier" desc="()Ljava/lang/Integer;" line="30"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="vars" desc="()Ljava/util/Set;" line="36"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="evaluate" desc="(Ljava/util/Map;)Ljava/lang/Boolean;" line="43"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="simplify" desc="()Ledu/postech/csed332/homework2/Exp;" line="50"><counter type="INSTRUCTION" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="toString" desc="()Ljava/lang/String;" line="55"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="11" covered="29"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="3" covered="9"/><counter type="COMPLEXITY" missed="3" covered="4"/><counter type="METHOD" missed="2" covered="4"/><counter type="CLASS" missed="0" covered="1"/></class><class name="edu/postech/csed332/homework2/Exp" sourcefilename="Exp.java"/><class name="edu/postech/csed332/homework2/Disjunction" sourcefilename="Disjunction.java"><method name="&lt;init&gt;" desc="([Ledu/postech/csed332/homework2/Exp;)V" line="17"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getSubexps" desc="()Ljava/util/List;" line="27"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="vars" desc="()Ljava/util/Set;" line="33"><counter type="INSTRUCTION" missed="0" covered="23"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="evaluate" desc="(Ljava/util/Map;)Ljava/lang/Boolean;" line="43"><counter type="INSTRUCTION" missed="0" covered="27"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="simplify" desc="()Ledu/postech/csed332/homework2/Exp;" line="53"><counter type="INSTRUCTION" missed="0" covered="199"/><counter type="BRANCH" missed="0" covered="24"/><counter type="LINE" missed="0" covered="40"/><counter type="COMPLEXITY" missed="0" covered="13"/><counter type="METHOD" missed="0" covered="1"/></method><method name="makeTruthMap" desc="(Ljava/util/List;Ljava/lang/Integer;)Ljava/util/List;" line="110"><counter type="INSTRUCTION" missed="0" covered="112"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="18"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="toString" desc="()Ljava/lang/String;" line="136"><counter type="INSTRUCTION" missed="0" covered="18"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$0" desc="(Ledu/postech/csed332/homework2/Exp;)Ljava/lang/String;" line="136"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="3" covered="389"/><counter type="BRANCH" missed="0" covered="32"/><counter type="LINE" missed="1" covered="70"/><counter type="COMPLEXITY" missed="1" covered="23"/><counter type="METHOD" missed="1" covered="7"/><counter type="CLASS" missed="0" covered="1"/></class><class name="edu/postech/csed332/homework2/ExpParser$2" sourcefilename="ExpParser.java"><method name="&lt;init&gt;" desc="()V" line="29"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="visitParenExp" desc="(Ledu/postech/csed332/homework2/BooleanExpParser$ParenExpContext;)Ledu/postech/csed332/homework2/Exp;" line="32"><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="visitUnaryExp" desc="(Ledu/postech/csed332/homework2/BooleanExpParser$UnaryExpContext;)Ledu/postech/csed332/homework2/Exp;" line="37"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="visitBinaryExp" desc="(Ledu/postech/csed332/homework2/BooleanExpParser$BinaryExpContext;)Ledu/postech/csed332/homework2/Exp;" line="42"><counter type="INSTRUCTION" missed="4" covered="48"/><counter type="BRANCH" missed="1" covered="2"/><counter type="LINE" missed="1" covered="3"/><counter type="COMPLEXITY" missed="1" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="visitConstant" desc="(Ledu/postech/csed332/homework2/BooleanExpParser$ConstantContext;)Ledu/postech/csed332/homework2/Exp;" line="54"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="visitVariable" desc="(Ledu/postech/csed332/homework2/BooleanExpParser$VariableContext;)Ledu/postech/csed332/homework2/Exp;" line="59"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="10" covered="78"/><counter type="BRANCH" missed="1" covered="2"/><counter type="LINE" missed="2" covered="7"/><counter type="COMPLEXITY" missed="2" covered="6"/><counter type="METHOD" missed="1" covered="5"/><counter type="CLASS" missed="0" covered="1"/></class><class name="edu/postech/csed332/homework2/ExpParser$1" sourcefilename="ExpParser.java"><method name="&lt;init&gt;" desc="()V" line="22"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="syntaxError" desc="(Lorg/antlr/v4/runtime/Recognizer;Ljava/lang/Object;IILjava/lang/String;Lorg/antlr/v4/runtime/RecognitionException;)V" line="25"><counter type="INSTRUCTION" missed="0" covered="18"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="21"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="2"/><counter type="CLASS" missed="0" covered="1"/></class><class name="edu/postech/csed332/homework2/BooleanExpParser$ConstantContext" sourcefilename="BooleanExpParser.java"><method name="TRUE" desc="()Lorg/antlr/v4/runtime/tree/TerminalNode;" line="106"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="FALSE" desc="()Lorg/antlr/v4/runtime/tree/TerminalNode;" line="107"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="&lt;init&gt;" desc="(Ledu/postech/csed332/homework2/BooleanExpParser$ExpressionContext;)V" line="108"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="accept" desc="(Lorg/antlr/v4/runtime/tree/ParseTreeVisitor;)Ljava/lang/Object;" line="111"><counter type="INSTRUCTION" missed="4" covered="8"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="1" covered="1"/><counter type="COMPLEXITY" missed="1" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="14" covered="14"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="3" covered="2"/><counter type="COMPLEXITY" missed="3" covered="2"/><counter type="METHOD" missed="2" covered="2"/><counter type="CLASS" missed="0" covered="1"/></class><class name="edu/postech/csed332/homework2/BooleanExpParser" sourcefilename="BooleanExpParser.java"><method name="makeRuleNames" desc="()[Ljava/lang/String;" line="24"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="makeLiteralNames" desc="()[Ljava/lang/String;" line="31"><counter type="INSTRUCTION" missed="0" covered="35"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="makeSymbolicNames" desc="()[Ljava/lang/String;" line="37"><counter type="INSTRUCTION" missed="0" covered="43"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getTokenNames" desc="()[Ljava/lang/String;" line="67"><counter type="INSTRUCTION" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getVocabulary" desc="()Lorg/antlr/v4/runtime/Vocabulary;" line="73"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getGrammarFileName" desc="()Ljava/lang/String;" line="77"><counter type="INSTRUCTION" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getRuleNames" desc="()[Ljava/lang/String;" line="80"><counter type="INSTRUCTION" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getSerializedATN" desc="()Ljava/lang/String;" line="83"><counter type="INSTRUCTION" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getATN" desc="()Lorg/antlr/v4/runtime/atn/ATN;" line="86"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="&lt;init&gt;" desc="(Lorg/antlr/v4/runtime/TokenStream;)V" line="89"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="expression" desc="()Ledu/postech/csed332/homework2/BooleanExpParser$ExpressionContext;" line="174"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="expression" desc="(I)Ledu/postech/csed332/homework2/BooleanExpParser$ExpressionContext;" line="178"><counter type="INSTRUCTION" missed="81" covered="298"/><counter type="BRANCH" missed="12" covered="14"/><counter type="LINE" missed="16" covered="70"/><counter type="COMPLEXITY" missed="11" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="sempred" desc="(Lorg/antlr/v4/runtime/RuleContext;II)Z" line="307"><counter type="INSTRUCTION" missed="10" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="3" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="expression_sempred" desc="(Ledu/postech/csed332/homework2/BooleanExpParser$ExpressionContext;I)Z" line="314"><counter type="INSTRUCTION" missed="16" covered="0"/><counter type="BRANCH" missed="3" covered="0"/><counter type="LINE" missed="4" covered="0"/><counter type="COMPLEXITY" missed="3" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="&lt;clinit&gt;" desc="()V" line="14"><counter type="INSTRUCTION" missed="0" covered="85"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="19"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="115" covered="489"/><counter type="BRANCH" missed="17" covered="22"/><counter type="LINE" missed="27" covered="98"/><counter type="COMPLEXITY" missed="20" covered="17"/><counter type="METHOD" missed="6" covered="9"/><counter type="CLASS" missed="0" covered="1"/></class><class name="edu/postech/csed332/homework2/ExpParser" sourcefilename="ExpParser.java"><method name="&lt;init&gt;" desc="()V" line="5"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="parse" desc="(Ljava/lang/String;)Ledu/postech/csed332/homework2/Exp;" line="19"><counter type="INSTRUCTION" missed="0" covered="27"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="3" covered="27"/><counter type="LINE" missed="1" covered="5"/><counter type="COMPLEXITY" missed="1" covered="1"/><counter type="METHOD" missed="1" covered="1"/><counter type="CLASS" missed="0" covered="1"/></class><class name="edu/postech/csed332/homework2/BooleanExpLexer" sourcefilename="BooleanExpLexer.java"><method name="makeRuleNames" desc="()[Ljava/lang/String;" line="30"><counter type="INSTRUCTION" missed="0" covered="39"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="makeLiteralNames" desc="()[Ljava/lang/String;" line="37"><counter type="INSTRUCTION" missed="0" covered="35"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="makeSymbolicNames" desc="()[Ljava/lang/String;" line="43"><counter type="INSTRUCTION" missed="0" covered="43"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getTokenNames" desc="()[Ljava/lang/String;" line="73"><counter type="INSTRUCTION" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getVocabulary" desc="()Lorg/antlr/v4/runtime/Vocabulary;" line="79"><counter type="INSTRUCTION" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="&lt;init&gt;" desc="(Lorg/antlr/v4/runtime/CharStream;)V" line="84"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getGrammarFileName" desc="()Ljava/lang/String;" line="89"><counter type="INSTRUCTION" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getRuleNames" desc="()[Ljava/lang/String;" line="92"><counter type="INSTRUCTION" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getSerializedATN" desc="()Ljava/lang/String;" line="95"><counter type="INSTRUCTION" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getChannelNames" desc="()[Ljava/lang/String;" line="98"><counter type="INSTRUCTION" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getModeNames" desc="()[Ljava/lang/String;" line="101"><counter type="INSTRUCTION" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getATN" desc="()Lorg/antlr/v4/runtime/atn/ATN;" line="104"><counter type="INSTRUCTION" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="&lt;clinit&gt;" desc="()V" line="14"><counter type="INSTRUCTION" missed="0" covered="103"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="21"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="16" covered="233"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="8" covered="27"/><counter type="COMPLEXITY" missed="8" covered="9"/><counter type="METHOD" missed="8" covered="5"/><counter type="CLASS" missed="0" covered="1"/></class><class name="edu/postech/csed332/homework2/BooleanExpParser$UnaryExpContext" sourcefilename="BooleanExpParser.java"><method name="NOT" desc="()Lorg/antlr/v4/runtime/tree/TerminalNode;" line="137"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="expression" desc="()Ledu/postech/csed332/homework2/BooleanExpParser$ExpressionContext;" line="139"><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="&lt;init&gt;" desc="(Ledu/postech/csed332/homework2/BooleanExpParser$ExpressionContext;)V" line="141"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="accept" desc="(Lorg/antlr/v4/runtime/tree/ParseTreeVisitor;)Ljava/lang/Object;" line="144"><counter type="INSTRUCTION" missed="4" covered="8"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="1" covered="1"/><counter type="COMPLEXITY" missed="1" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="15" covered="14"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="3" covered="2"/><counter type="COMPLEXITY" missed="3" covered="2"/><counter type="METHOD" missed="2" covered="2"/><counter type="CLASS" missed="0" covered="1"/></class><class name="edu/postech/csed332/homework2/Conjunction" sourcefilename="Conjunction.java"><method name="&lt;init&gt;" desc="([Ledu/postech/csed332/homework2/Exp;)V" line="17"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getSubexps" desc="()Ljava/util/List;" line="27"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="vars" desc="()Ljava/util/Set;" line="33"><counter type="INSTRUCTION" missed="0" covered="23"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="evaluate" desc="(Ljava/util/Map;)Ljava/lang/Boolean;" line="43"><counter type="INSTRUCTION" missed="0" covered="27"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="simplify" desc="()Ledu/postech/csed332/homework2/Exp;" line="53"><counter type="INSTRUCTION" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="toString" desc="()Ljava/lang/String;" line="58"><counter type="INSTRUCTION" missed="0" covered="18"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$0" desc="(Ledu/postech/csed332/homework2/Exp;)Ljava/lang/String;" line="58"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="5" covered="78"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="2" covered="12"/><counter type="COMPLEXITY" missed="2" covered="7"/><counter type="METHOD" missed="2" covered="5"/><counter type="CLASS" missed="0" covered="1"/></class><class name="edu/postech/csed332/homework2/BooleanExpParser$ParenExpContext" sourcefilename="BooleanExpParser.java"><method name="LPAREN" desc="()Lorg/antlr/v4/runtime/tree/TerminalNode;" line="160"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="RPAREN" desc="()Lorg/antlr/v4/runtime/tree/TerminalNode;" line="161"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="expression" desc="()Ledu/postech/csed332/homework2/BooleanExpParser$ExpressionContext;" line="163"><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="&lt;init&gt;" desc="(Ledu/postech/csed332/homework2/BooleanExpParser$ExpressionContext;)V" line="165"><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="accept" desc="(Lorg/antlr/v4/runtime/tree/ParseTreeVisitor;)Ljava/lang/Object;" line="168"><counter type="INSTRUCTION" missed="12" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="34" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="6" covered="0"/><counter type="COMPLEXITY" missed="6" covered="0"/><counter type="METHOD" missed="5" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="edu/postech/csed332/homework2/BooleanExpBaseVisitor" sourcefilename="BooleanExpBaseVisitor.java"><method name="&lt;init&gt;" desc="()V" line="13"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="visitConstant" desc="(Ledu/postech/csed332/homework2/BooleanExpParser$ConstantContext;)Ljava/lang/Object;" line="20"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="visitBinaryExp" desc="(Ledu/postech/csed332/homework2/BooleanExpParser$BinaryExpContext;)Ljava/lang/Object;" line="27"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="visitUnaryExp" desc="(Ledu/postech/csed332/homework2/BooleanExpParser$UnaryExpContext;)Ljava/lang/Object;" line="34"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="visitVariable" desc="(Ledu/postech/csed332/homework2/BooleanExpParser$VariableContext;)Ljava/lang/Object;" line="41"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="visitParenExp" desc="(Ledu/postech/csed332/homework2/BooleanExpParser$ParenExpContext;)Ljava/lang/Object;" line="48"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="20" covered="3"/><counter type="LINE" missed="5" covered="1"/><counter type="COMPLEXITY" missed="5" covered="1"/><counter type="METHOD" missed="5" covered="1"/><counter type="CLASS" missed="0" covered="1"/></class><class name="edu/postech/csed332/homework2/BooleanExpVisitor" sourcefilename="BooleanExpVisitor.java"/><sourcefile name="Variable.java"><line nr="17" mi="0" ci="2" mb="0" cb="0"/><line nr="18" mi="0" ci="2" mb="1" cb="1"/><line nr="19" mi="0" ci="4" mb="0" cb="0"/><line nr="21" mi="5" ci="0" mb="0" cb="0"/><line nr="22" mi="0" ci="1" mb="0" cb="0"/><line nr="30" mi="4" ci="0" mb="0" cb="0"/><line nr="36" mi="0" ci="5" mb="0" cb="0"/><line nr="37" mi="0" ci="2" mb="0" cb="0"/><line nr="43" mi="0" ci="7" mb="0" cb="0"/><line nr="44" mi="0" ci="2" mb="0" cb="0"/><line nr="50" mi="2" ci="0" mb="0" cb="0"/><line nr="55" mi="0" ci="4" mb="0" cb="0"/><counter type="INSTRUCTION" missed="11" covered="29"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="3" covered="9"/><counter type="COMPLEXITY" missed="3" covered="4"/><counter type="METHOD" missed="2" covered="4"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><sourcefile name="Negation.java"><line nr="16" mi="0" ci="2" mb="0" cb="0"/><line nr="17" mi="0" ci="3" mb="0" cb="0"/><line nr="18" mi="0" ci="1" mb="0" cb="0"/><line nr="26" mi="3" ci="0" mb="0" cb="0"/><line nr="32" mi="0" ci="4" mb="0" cb="0"/><line nr="38" mi="0" ci="4" mb="0" cb="0"/><line nr="39" mi="0" ci="3" mb="0" cb="0"/><line nr="40" mi="0" ci="3" mb="0" cb="0"/><line nr="41" mi="0" ci="4" mb="0" cb="2"/><line nr="42" mi="0" ci="12" mb="0" cb="2"/><line nr="44" mi="0" ci="2" mb="0" cb="0"/><line nr="50" mi="2" ci="0" mb="0" cb="0"/><line nr="55" mi="0" ci="11" mb="0" cb="0"/><counter type="INSTRUCTION" missed="5" covered="49"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="2" covered="11"/><counter type="COMPLEXITY" missed="2" covered="6"/><counter type="METHOD" missed="2" covered="4"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><sourcefile name="Disjunction.java"><line nr="17" mi="0" ci="2" mb="0" cb="0"/><line nr="18" mi="0" ci="4" mb="0" cb="0"/><line nr="19" mi="0" ci="1" mb="0" cb="0"/><line nr="27" mi="3" ci="0" mb="0" cb="0"/><line nr="33" mi="0" ci="4" mb="0" cb="0"/><line nr="34" mi="0" ci="12" mb="0" cb="2"/><line nr="35" mi="0" ci="5" mb="0" cb="0"/><line nr="37" mi="0" ci="2" mb="0" cb="0"/><line nr="43" mi="0" ci="3" mb="0" cb="0"/><line nr="44" mi="0" ci="9" mb="0" cb="2"/><line nr="45" mi="0" ci="13" mb="0" cb="0"/><line nr="47" mi="0" ci="2" mb="0" cb="0"/><line nr="53" mi="0" ci="6" mb="0" cb="0"/><line nr="54" mi="0" ci="6" mb="0" cb="0"/><line nr="55" mi="0" ci="4" mb="0" cb="0"/><line nr="56" mi="0" ci="2" mb="0" cb="0"/><line nr="57" mi="0" ci="4" mb="0" cb="0"/><line nr="58" mi="0" ci="3" mb="0" cb="0"/><line nr="59" mi="0" ci="8" mb="0" cb="2"/><line nr="60" mi="0" ci="5" mb="0" cb="0"/><line nr="61" mi="0" ci="4" mb="0" cb="0"/><line nr="62" mi="0" ci="8" mb="0" cb="2"/><line nr="63" mi="0" ci="20" mb="0" cb="2"/><line nr="65" mi="0" ci="9" mb="0" cb="2"/><line nr="68" mi="0" ci="4" mb="0" cb="2"/><line nr="69" mi="0" ci="5" mb="0" cb="0"/><line nr="70" mi="0" ci="4" mb="0" cb="0"/><line nr="71" mi="0" ci="3" mb="0" cb="0"/><line nr="73" mi="0" ci="8" mb="0" cb="2"/><line nr="74" mi="0" ci="3" mb="0" cb="0"/><line nr="75" mi="0" ci="5" mb="0" cb="0"/><line nr="76" mi="0" ci="8" mb="0" cb="2"/><line nr="77" mi="0" ci="4" mb="0" cb="2"/><line nr="78" mi="0" ci="5" mb="0" cb="0"/><line nr="79" mi="0" ci="2" mb="0" cb="0"/><line nr="80" mi="0" ci="2" mb="0" cb="0"/><line nr="81" mi="0" ci="8" mb="0" cb="2"/><line nr="82" mi="0" ci="7" mb="0" cb="0"/><line nr="83" mi="0" ci="7" mb="0" cb="0"/><line nr="84" mi="0" ci="3" mb="0" cb="2"/><line nr="85" mi="0" ci="1" mb="0" cb="0"/><line nr="86" mi="0" ci="6" mb="0" cb="0"/><line nr="89" mi="0" ci="3" mb="0" cb="2"/><line nr="90" mi="0" ci="5" mb="0" cb="0"/><line nr="91" mi="0" ci="7" mb="0" cb="0"/><line nr="92" mi="0" ci="4" mb="0" cb="0"/><line nr="93" mi="0" ci="3" mb="0" cb="0"/><line nr="96" mi="0" ci="3" mb="0" cb="2"/><line nr="98" mi="0" ci="4" mb="0" cb="0"/><line nr="99" mi="0" ci="1" mb="0" cb="0"/><line nr="101" mi="0" ci="3" mb="0" cb="0"/><line nr="106" mi="0" ci="2" mb="0" cb="0"/><line nr="110" mi="0" ci="4" mb="0" cb="0"/><line nr="111" mi="0" ci="7" mb="0" cb="2"/><line nr="112" mi="0" ci="4" mb="0" cb="0"/><line nr="113" mi="0" ci="10" mb="0" cb="0"/><line nr="114" mi="0" ci="4" mb="0" cb="0"/><line nr="115" mi="0" ci="10" mb="0" cb="0"/><line nr="116" mi="0" ci="4" mb="0" cb="0"/><line nr="117" mi="0" ci="4" mb="0" cb="0"/><line nr="118" mi="0" ci="2" mb="0" cb="0"/><line nr="121" mi="0" ci="9" mb="0" cb="0"/><line nr="122" mi="0" ci="8" mb="0" cb="2"/><line nr="123" mi="0" ci="8" mb="0" cb="0"/><line nr="124" mi="0" ci="10" mb="0" cb="0"/><line nr="125" mi="0" ci="4" mb="0" cb="0"/><line nr="126" mi="0" ci="8" mb="0" cb="0"/><line nr="127" mi="0" ci="10" mb="0" cb="0"/><line nr="128" mi="0" ci="4" mb="0" cb="0"/><line nr="130" mi="0" ci="2" mb="0" cb="0"/><line nr="136" mi="0" ci="21" mb="0" cb="0"/><counter type="INSTRUCTION" missed="3" covered="389"/><counter type="BRANCH" missed="0" covered="32"/><counter type="LINE" missed="1" covered="70"/><counter type="COMPLEXITY" missed="1" covered="23"/><counter type="METHOD" missed="1" covered="7"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><sourcefile name="ExpParser.java"><line nr="5" mi="3" ci="0" mb="0" cb="0"/><line nr="19" mi="0" ci="6" mb="0" cb="0"/><line nr="20" mi="0" ci="8" mb="0" cb="0"/><line nr="22" mi="0" ci="8" mb="0" cb="0"/><line nr="25" mi="0" ci="18" mb="0" cb="0"/><line nr="29" mi="0" ci="7" mb="0" cb="0"/><line nr="32" mi="6" ci="0" mb="0" cb="0"/><line nr="37" mi="0" ci="9" mb="0" cb="0"/><line nr="42" mi="0" ci="4" mb="1" cb="2"/><line nr="44" mi="0" ci="22" mb="0" cb="0"/><line nr="46" mi="0" ci="22" mb="0" cb="0"/><line nr="48" mi="4" ci="0" mb="0" cb="0"/><line nr="54" mi="0" ci="8" mb="0" cb="0"/><line nr="59" mi="0" ci="10" mb="0" cb="0"/><line nr="61" mi="0" ci="4" mb="0" cb="0"/><counter type="INSTRUCTION" missed="13" covered="126"/><counter type="BRANCH" missed="1" covered="2"/><counter type="LINE" missed="3" covered="12"/><counter type="COMPLEXITY" missed="3" covered="9"/><counter type="METHOD" missed="2" covered="8"/><counter type="CLASS" missed="0" covered="3"/></sourcefile><sourcefile name="Exp.java"/><sourcefile name="BooleanExpLexer.java"><line nr="14" mi="0" ci="3" mb="0" cb="0"/><line nr="17" mi="0" ci="4" mb="0" cb="0"/><line nr="21" mi="0" ci="11" mb="0" cb="0"/><line nr="25" mi="0" ci="7" mb="0" cb="0"/><line nr="30" mi="0" ci="39" mb="0" cb="0"/><line nr="34" mi="0" ci="2" mb="0" cb="0"/><line nr="37" mi="0" ci="35" mb="0" cb="0"/><line nr="41" mi="0" ci="2" mb="0" cb="0"/><line nr="43" mi="0" ci="43" mb="0" cb="0"/><line nr="48" mi="0" ci="2" mb="0" cb="0"/><line nr="49" mi="0" ci="6" mb="0" cb="0"/><line nr="57" mi="0" ci="4" mb="0" cb="0"/><line nr="58" mi="0" ci="8" mb="0" cb="2"/><line nr="59" mi="0" ci="6" mb="0" cb="0"/><line nr="60" mi="0" ci="4" mb="0" cb="2"/><line nr="61" mi="0" ci="6" mb="0" cb="0"/><line nr="64" mi="0" ci="4" mb="0" cb="2"/><line nr="65" mi="0" ci="4" mb="0" cb="0"/><line nr="73" mi="2" ci="0" mb="0" cb="0"/><line nr="79" mi="2" ci="0" mb="0" cb="0"/><line nr="84" mi="0" ci="3" mb="0" cb="0"/><line nr="85" mi="0" ci="9" mb="0" cb="0"/><line nr="86" mi="0" ci="1" mb="0" cb="0"/><line nr="89" mi="2" ci="0" mb="0" cb="0"/><line nr="92" mi="2" ci="0" mb="0" cb="0"/><line nr="95" mi="2" ci="0" mb="0" cb="0"/><line nr="98" mi="2" ci="0" mb="0" cb="0"/><line nr="101" mi="2" ci="0" mb="0" cb="0"/><line nr="104" mi="2" ci="0" mb="0" cb="0"/><line nr="123" mi="0" ci="4" mb="0" cb="0"/><line nr="124" mi="0" ci="3" mb="0" cb="0"/><line nr="126" mi="0" ci="4" mb="0" cb="0"/><line nr="127" mi="0" ci="8" mb="0" cb="2"/><line nr="128" mi="0" ci="10" mb="0" cb="0"/><line nr="130" mi="0" ci="1" mb="0" cb="0"/><counter type="INSTRUCTION" missed="16" covered="233"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="8" covered="27"/><counter type="COMPLEXITY" missed="8" covered="9"/><counter type="METHOD" missed="8" covered="5"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><sourcefile name="BooleanExpVisitor.java"/><sourcefile name="Constant.java"><line nr="16" mi="0" ci="2" mb="0" cb="0"/><line nr="17" mi="0" ci="3" mb="0" cb="0"/><line nr="18" mi="0" ci="1" mb="0" cb="0"/><line nr="24" mi="3" ci="0" mb="0" cb="0"/><line nr="30" mi="0" ci="4" mb="0" cb="0"/><line nr="36" mi="0" ci="4" mb="0" cb="0"/><line nr="42" mi="2" ci="0" mb="0" cb="0"/><line nr="47" mi="0" ci="4" mb="0" cb="0"/><counter type="INSTRUCTION" missed="5" covered="18"/><counter type="LINE" missed="2" covered="6"/><counter type="COMPLEXITY" missed="2" covered="4"/><counter type="METHOD" missed="2" covered="4"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><sourcefile name="BooleanExpBaseVisitor.java"><line nr="13" mi="0" ci="3" mb="0" cb="0"/><line nr="20" mi="4" ci="0" mb="0" cb="0"/><line nr="27" mi="4" ci="0" mb="0" cb="0"/><line nr="34" mi="4" ci="0" mb="0" cb="0"/><line nr="41" mi="4" ci="0" mb="0" cb="0"/><line nr="48" mi="4" ci="0" mb="0" cb="0"/><counter type="INSTRUCTION" missed="20" covered="3"/><counter type="LINE" missed="5" covered="1"/><counter type="COMPLEXITY" missed="5" covered="1"/><counter type="METHOD" missed="5" covered="1"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><sourcefile name="BooleanExpParser.java"><line nr="14" mi="0" ci="3" mb="0" cb="0"/><line nr="17" mi="0" ci="4" mb="0" cb="0"/><line nr="24" mi="0" ci="7" mb="0" cb="0"/><line nr="28" mi="0" ci="2" mb="0" cb="0"/><line nr="31" mi="0" ci="35" mb="0" cb="0"/><line nr="35" mi="0" ci="2" mb="0" cb="0"/><line nr="37" mi="0" ci="43" mb="0" cb="0"/><line nr="42" mi="0" ci="2" mb="0" cb="0"/><line nr="43" mi="0" ci="6" mb="0" cb="0"/><line nr="51" mi="0" ci="4" mb="0" cb="0"/><line nr="52" mi="0" ci="8" mb="0" cb="2"/><line nr="53" mi="0" ci="6" mb="0" cb="0"/><line nr="54" mi="0" ci="4" mb="0" cb="2"/><line nr="55" mi="0" ci="6" mb="0" cb="0"/><line nr="58" mi="0" ci="4" mb="0" cb="2"/><line nr="59" mi="0" ci="4" mb="0" cb="0"/><line nr="67" mi="2" ci="0" mb="0" cb="0"/><line nr="73" mi="0" ci="2" mb="0" cb="0"/><line nr="77" mi="2" ci="0" mb="0" cb="0"/><line nr="80" mi="2" ci="0" mb="0" cb="0"/><line nr="83" mi="2" ci="0" mb="0" cb="0"/><line nr="86" mi="0" ci="2" mb="0" cb="0"/><line nr="89" mi="0" ci="3" mb="0" cb="0"/><line nr="90" mi="0" ci="9" mb="0" cb="0"/><line nr="91" mi="0" ci="1" mb="0" cb="0"/><line nr="95" mi="0" ci="4" mb="0" cb="0"/><line nr="96" mi="0" ci="1" mb="0" cb="0"/><line nr="97" mi="2" ci="0" mb="0" cb="0"/><line nr="99" mi="0" ci="3" mb="0" cb="0"/><line nr="101" mi="0" ci="3" mb="0" cb="0"/><line nr="102" mi="0" ci="1" mb="0" cb="0"/><line nr="106" mi="5" ci="0" mb="0" cb="0"/><line nr="107" mi="5" ci="0" mb="0" cb="0"/><line nr="108" mi="0" ci="6" mb="0" cb="0"/><line nr="111" mi="0" ci="8" mb="1" cb="1"/><line nr="112" mi="4" ci="0" mb="0" cb="0"/><line nr="120" mi="4" ci="0" mb="0" cb="0"/><line nr="123" mi="6" ci="0" mb="0" cb="0"/><line nr="125" mi="5" ci="0" mb="0" cb="0"/><line nr="126" mi="5" ci="0" mb="0" cb="0"/><line nr="127" mi="0" ci="6" mb="0" cb="0"/><line nr="130" mi="0" ci="8" mb="1" cb="1"/><line nr="131" mi="4" ci="0" mb="0" cb="0"/><line nr="137" mi="5" ci="0" mb="0" cb="0"/><line nr="139" mi="6" ci="0" mb="0" cb="0"/><line nr="141" mi="0" ci="6" mb="0" cb="0"/><line nr="144" mi="0" ci="8" mb="1" cb="1"/><line nr="145" mi="4" ci="0" mb="0" cb="0"/><line nr="150" mi="5" ci="0" mb="0" cb="0"/><line nr="151" mi="0" ci="6" mb="0" cb="0"/><line nr="154" mi="0" ci="8" mb="1" cb="1"/><line nr="155" mi="4" ci="0" mb="0" cb="0"/><line nr="160" mi="5" ci="0" mb="0" cb="0"/><line nr="161" mi="5" ci="0" mb="0" cb="0"/><line nr="163" mi="6" ci="0" mb="0" cb="0"/><line nr="165" mi="6" ci="0" mb="0" cb="0"/><line nr="168" mi="8" ci="0" mb="2" cb="0"/><line nr="169" mi="4" ci="0" mb="0" cb="0"/><line nr="174" mi="0" ci="4" mb="0" cb="0"/><line nr="178" mi="0" ci="3" mb="0" cb="0"/><line nr="179" mi="0" ci="3" mb="0" cb="0"/><line nr="180" mi="0" ci="7" mb="0" cb="0"/><line nr="181" mi="0" ci="2" mb="0" cb="0"/><line nr="182" mi="0" ci="2" mb="0" cb="0"/><line nr="183" mi="0" ci="6" mb="0" cb="0"/><line nr="187" mi="0" ci="4" mb="0" cb="0"/><line nr="189" mi="0" ci="3" mb="0" cb="0"/><line nr="190" mi="0" ci="4" mb="0" cb="0"/><line nr="191" mi="0" ci="5" mb="2" cb="3"/><line nr="194" mi="0" ci="5" mb="0" cb="0"/><line nr="195" mi="0" ci="3" mb="0" cb="0"/><line nr="196" mi="0" ci="2" mb="0" cb="0"/><line nr="198" mi="0" ci="3" mb="0" cb="0"/><line nr="199" mi="0" ci="6" mb="0" cb="0"/><line nr="200" mi="0" ci="3" mb="0" cb="0"/><line nr="201" mi="0" ci="6" mb="0" cb="0"/><line nr="203" mi="0" ci="1" mb="0" cb="0"/><line nr="206" mi="5" ci="0" mb="0" cb="0"/><line nr="207" mi="3" ci="0" mb="0" cb="0"/><line nr="208" mi="2" ci="0" mb="0" cb="0"/><line nr="209" mi="3" ci="0" mb="0" cb="0"/><line nr="210" mi="4" ci="0" mb="0" cb="0"/><line nr="211" mi="3" ci="0" mb="0" cb="0"/><line nr="212" mi="6" ci="0" mb="0" cb="0"/><line nr="213" mi="3" ci="0" mb="0" cb="0"/><line nr="214" mi="4" ci="0" mb="0" cb="0"/><line nr="216" mi="1" ci="0" mb="0" cb="0"/><line nr="219" mi="0" ci="5" mb="0" cb="0"/><line nr="220" mi="0" ci="3" mb="0" cb="0"/><line nr="221" mi="0" ci="2" mb="0" cb="0"/><line nr="222" mi="0" ci="3" mb="0" cb="0"/><line nr="223" mi="0" ci="6" mb="0" cb="0"/><line nr="225" mi="0" ci="1" mb="0" cb="0"/><line nr="229" mi="0" ci="5" mb="0" cb="0"/><line nr="230" mi="0" ci="3" mb="0" cb="0"/><line nr="231" mi="0" ci="2" mb="0" cb="0"/><line nr="232" mi="0" ci="3" mb="0" cb="0"/><line nr="233" mi="0" ci="7" mb="0" cb="0"/><line nr="234" mi="0" ci="5" mb="0" cb="0"/><line nr="235" mi="3" ci="3" mb="3" cb="1"/><line nr="236" mi="8" ci="0" mb="0" cb="0"/><line nr="239" mi="3" ci="6" mb="1" cb="1"/><line nr="240" mi="0" ci="4" mb="0" cb="0"/><line nr="241" mi="0" ci="3" mb="0" cb="0"/><line nr="244" mi="0" ci="1" mb="0" cb="0"/><line nr="246" mi="5" ci="0" mb="0" cb="0"/><line nr="248" mi="0" ci="7" mb="0" cb="0"/><line nr="249" mi="0" ci="3" mb="0" cb="0"/><line nr="250" mi="0" ci="4" mb="0" cb="0"/><line nr="251" mi="0" ci="10" mb="0" cb="0"/><line nr="252" mi="0" ci="5" mb="1" cb="3"/><line nr="253" mi="0" ci="3" mb="1" cb="1"/><line nr="254" mi="2" ci="3" mb="1" cb="1"/><line nr="255" mi="0" ci="2" mb="0" cb="0"/><line nr="257" mi="0" ci="3" mb="0" cb="0"/><line nr="258" mi="0" ci="4" mb="0" cb="0"/><line nr="259" mi="0" ci="10" mb="1" cb="2"/><line nr="262" mi="0" ci="9" mb="0" cb="0"/><line nr="263" mi="0" ci="4" mb="0" cb="0"/><line nr="264" mi="0" ci="5" mb="0" cb="0"/><line nr="265" mi="0" ci="3" mb="0" cb="0"/><line nr="266" mi="6" ci="6" mb="1" cb="1"/><line nr="267" mi="0" ci="3" mb="0" cb="0"/><line nr="268" mi="0" ci="6" mb="0" cb="0"/><line nr="269" mi="0" ci="3" mb="0" cb="0"/><line nr="270" mi="0" ci="6" mb="0" cb="0"/><line nr="272" mi="0" ci="1" mb="0" cb="0"/><line nr="275" mi="0" ci="9" mb="0" cb="0"/><line nr="276" mi="0" ci="4" mb="0" cb="0"/><line nr="277" mi="0" ci="5" mb="0" cb="0"/><line nr="278" mi="0" ci="3" mb="0" cb="0"/><line nr="279" mi="6" ci="6" mb="1" cb="1"/><line nr="280" mi="0" ci="3" mb="0" cb="0"/><line nr="281" mi="0" ci="6" mb="0" cb="0"/><line nr="282" mi="0" ci="3" mb="0" cb="0"/><line nr="283" mi="0" ci="6" mb="0" cb="0"/><line nr="289" mi="0" ci="3" mb="0" cb="0"/><line nr="290" mi="0" ci="4" mb="0" cb="0"/><line nr="291" mi="0" ci="11" mb="0" cb="0"/><line nr="295" mi="1" ci="0" mb="0" cb="0"/><line nr="296" mi="3" ci="0" mb="0" cb="0"/><line nr="297" mi="5" ci="0" mb="0" cb="0"/><line nr="298" mi="5" ci="0" mb="0" cb="0"/><line nr="301" mi="0" ci="3" mb="0" cb="0"/><line nr="303" mi="0" ci="2" mb="0" cb="0"/><line nr="307" mi="2" ci="0" mb="2" cb="0"/><line nr="309" mi="6" ci="0" mb="0" cb="0"/><line nr="311" mi="2" ci="0" mb="0" cb="0"/><line nr="314" mi="2" ci="0" mb="3" cb="0"/><line nr="316" mi="6" ci="0" mb="0" cb="0"/><line nr="318" mi="6" ci="0" mb="0" cb="0"/><line nr="320" mi="2" ci="0" mb="0" cb="0"/><line nr="333" mi="0" ci="4" mb="0" cb="0"/><line nr="334" mi="0" ci="3" mb="0" cb="0"/><line nr="336" mi="0" ci="4" mb="0" cb="0"/><line nr="337" mi="0" ci="8" mb="0" cb="2"/><line nr="338" mi="0" ci="10" mb="0" cb="0"/><line nr="340" mi="0" ci="1" mb="0" cb="0"/><counter type="INSTRUCTION" missed="213" covered="557"/><counter type="BRANCH" missed="23" covered="26"/><counter type="LINE" missed="47" covered="111"/><counter type="COMPLEXITY" missed="40" covered="28"/><counter type="METHOD" missed="21" covered="20"/><counter type="CLASS" missed="1" covered="6"/></sourcefile><sourcefile name="Conjunction.java"><line nr="17" mi="0" ci="2" mb="0" cb="0"/><line nr="18" mi="0" ci="4" mb="0" cb="0"/><line nr="19" mi="0" ci="1" mb="0" cb="0"/><line nr="27" mi="3" ci="0" mb="0" cb="0"/><line nr="33" mi="0" ci="4" mb="0" cb="0"/><line nr="34" mi="0" ci="12" mb="0" cb="2"/><line nr="35" mi="0" ci="5" mb="0" cb="0"/><line nr="37" mi="0" ci="2" mb="0" cb="0"/><line nr="43" mi="0" ci="3" mb="0" cb="0"/><line nr="44" mi="0" ci="9" mb="0" cb="2"/><line nr="45" mi="0" ci="13" mb="0" cb="0"/><line nr="47" mi="0" ci="2" mb="0" cb="0"/><line nr="53" mi="2" ci="0" mb="0" cb="0"/><line nr="58" mi="0" ci="21" mb="0" cb="0"/><counter type="INSTRUCTION" missed="5" covered="78"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="2" covered="12"/><counter type="COMPLEXITY" missed="2" covered="7"/><counter type="METHOD" missed="2" covered="5"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><counter type="INSTRUCTION" missed="291" covered="1482"/><counter type="BRANCH" missed="25" covered="77"/><counter type="LINE" missed="73" covered="259"/><counter type="COMPLEXITY" missed="66" covered="91"/><counter type="METHOD" missed="45" covered="58"/><counter type="CLASS" missed="1" covered="16"/></package><counter type="INSTRUCTION" missed="291" covered="1482"/><counter type="BRANCH" missed="25" covered="77"/><counter type="LINE" missed="73" covered="259"/><counter type="COMPLEXITY" missed="66" covered="91"/><counter type="METHOD" missed="45" covered="58"/><counter type="CLASS" missed="1" covered="16"/></report>